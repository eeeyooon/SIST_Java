package com.test.java;   //03.07

public class Ex04_Variable {

	public static void main(String[] args) {
		
		//Ex04_Variable.java
		
		//상황
		//- 성적 관리 프로그램
		//- 과목별 점수 
		//- 국어 점수 
		
		//1. 국어 점수 > 성질 분석 > 형태(정수) + 길이(0~100 / 정수형에서는 길이를 4종류를 제공하니까 그중 선택)
		//2. 1의 상황 > 자료형 중 하나를 선택 > byte형 (모두 0~100을 표현할 수 있지만 그 중 가장 작은 걸 선택)
		//3. 2의 자료형 > 변수 생성
		//4. 변수 입출력
		
		
		//변수 생성하기
		//- 자료형 변수명;
		
		byte 국어점수;
		
		
		//변수 초기화 
		//- 변수명 = 값;
		
		국어점수 = 100;
		
		//변수 사용하기 
		System.out.println(국어점수); // 공간 출력(X), 공간을 찾아가서 그 안의 값을 가져와 출력
		
		
		//**변수 생성하기
		//영어점수 + 다른 학생의 영어점수 생성. > 변수명은 중복될 수 없음.
		byte eng;
		//byte eng; // Duplicate local variable eng : 중복변수 라는 에러뜸
		byte eng1;
		
		//short eng; // 자료형이 달라도 변수명은 중복 안됨.
		
		//수학점수 
		byte math;
		
	
		
		//변수명
		//1. 영문자 사용 + 숫자 사용 + 특수문자도 가능은 하나 (_) underline만 가능 -> 되도록이면 이렇게하라고 권장(필수)
		//($도 가능은 한데, 웬만하면 쓰지말라고 노란줄 뜸)
		// byte math$; // The value of the local variable math$ is not used (네가 이거 써본 적이 없음.)
		// 메모리만 잡아 놓고 쓰지 않으니까 웬만해선 쓰지말라고 경고함. 
		// 문법적으로는 권장임. 돌아가긴하니까. 근데 관례적으로는 필수.
		
		
		//**변수명 생성 규칙 > 명명법
		//1. 영문자 사용 + 숫자 사용 + 특수문자(_) > 권장(필수) / 공백X / 대소문자구별함
		//2. 숫자로 시작 불가능 
		//3. 예약어 사용 불가능
		//4. 의미있게 정하기(********) > 1,2,3번은 틀려도 에러가 나는데 4번은 에러가 안남.
		
		
		byte eng2;
		//byte 3eng;
		byte _3eng;
		//숫자로 시작하면 안돼서 언더라인을 앞에 두긴하지만 그정도까지 숫자를 앞에 넣어야 할 상황이 잘 없음.
		
		
		//byte byte; > 예약어는 색이 다름.
		
		
		//프로그램 통과(o), 가독성 실패(x)
		//아니면 주석으로 설명 붙이는 방법도 있지만 코드는 얼마든지 길어질 수 있으니 주석을 찾는 것도 어려움.
		byte a;
		a = 90;
		System.out.println(a);
		
		byte kor;
		kor = 80;
		System.out.println(kor);
		
		
		//프로그래밍 기술의 발전 방향 !! 한결같은 목표 > 코드의 재사용(감소)
		//프로그램 생성 > 프로그램 유지/보수
		
		//math1, math2, math3

		byte math1;
		byte math2;
		byte math3;
		
		//중복이 되니까 자료형이 같은 변수는 다음과 같이 콤마로 함께 선언할 수 있음.
		//수학점수 0~100점 > 0~300점으로 바뀌면 에러 뜸.
		//그러면 자료형을 수정해야하는데, 다 따로 바꿔야하는 번거로움이 있음.
		//근데 밑에 꺼는 한번만 바꾸면 되니까, 처음 생성할때나 수정할때나 편리함.
		//(그렇다고 무조건 좋다는 건 아님. 다만 자료형이 같은 여러 변수를 한번에 수정할 땐 밑 방식이
		// 생산성이나 유지보수 측면에서 좋은 것.)
		
		
		byte math4, math5, math6; //생산성 높음, 유지보수상 높음.
		
		byte math7;		//변수 선언
		math7 = 100;	//변수 초기화
		
		byte math8 = 100; //변수 선언 + 초기화 
		
		byte math9 = 100, math10 = 90, math11 = 80;	// 한꺼번에 다같이 선언+초기화 가능
		
		byte math12, math13 = 100, math14;			// 몇개는 선언만 몇개는 초기화까지 가능.
		
		//초기화 하고싶은 애들은 초기화하고 선언만하고 싶은 애들은 선언만 해도 됨.
		
		
		//프로그래밍 공부는 "기술 습득"이 목표임.
		//머리로 이해뿐만 아니라 몸으로 익혀야 완전히 배우는 것. 
		//이론만 보지말고 직접 실습해봐.
		//몇번이나 스스로 실습해라!!!
		
		
		
		
		//국어 점수 > 90점 > 화면 출력
		
		//의미를 알 수 있나? 없나?가 굉장히 중요한 요소
		
		System.out.println(90);		//의미없음(알수없음)
		
		byte kor1; // 변수 선언
		kor1 = 90; //변수 초기화 
		System.out.println(kor1);	//의미있음 > 변수의 역할 중 하나(****)
		
		kor1 = 80; // 변수값 수정 > 변수 치환 > 덮어쓰기
		System.out.println(kor1);
		//kor1 출력 > 80
		
		//*** 표현식은 동일한데(kor1) 값이 바뀜. > 변수
		
		//*** 표현식은 동일한데(90) 값이 안바뀜. > 상수 > 데이터(값) > 리터럴(Literal)
		System.out.println(90);
		System.out.println(90);
		
		
		//데이터 취급
		//1. 변수 > 의미부여!!
		//2. 상수 
		
		System.out.println(80);		//리터럴 > 의미 없음. + 값이 불변.
		
		byte kor2 = 80; 
		System.out.println(kor2);	//변수 > 값이 바뀔 수 있음.
		
		
		//final 변수 = 상수라고 부름.
		//-수정이 불가능함.
		//-한번 값을 초기화하면 더이상 변경을 할 수 없는 변수
		//-*** 상수를 사용하고 싶은데 리터럴은 의미가 없어서, 의미 있는 상수를 사용하기 위해서 !!
		//헷갈리니까 순수한 데이터는 리터럴이라고 부르고 final이 붙은 변수를 상수라고 부르기로 약속함. (무조건 지켜야하는건 아님 상황에 따라 적절히)
		final byte kor3 = 70;
		//kor3 = 65; // error. 상수(final 변수)는 수정이 불가능.
		System.out.println(kor3);
		
		
		// 자바는 (식별자의) 대소문자를 구분한다.

		
		//프로그램 상에서 절대로 바뀌면 안되는 값이 존재함. 그럴땐 상수로 만들면됨.
		// final 변수는 대문자로 작성한다. (****) > 변수와 구분하기 위해서!!!! (가독성)
		
		final double PI = 3.14;
		System.out.println(PI*20);
		
		//PI =5.20; 하면 error
		
		//TODO 왜 소수이하 자릿수가 제어되지 않는지 모르겠음.
		
		//식별자 명명법 패턴
		//1. 헝가리언 표기법
		//2. 파스칼 표기법
		//3. 캐멀 표기법
		//4. 스네이크 표기법
		//5. 케밥 표기법 
		
		
		//1. 헝가리언 표기법
		//-식별자를 만들때 식별자의 접두어로 해당 자료형을 표시하는 방법.
		
		int age; // age 변수를 만들 때
		int intAge;
		int int_age;
		int i_age;
		//세가지 모두 이 변수는 int형이라는걸 알려줌.
		//코드가 길어져서 선언 코드가 안보일때 변수명만으로도 자료형을 알 수 있다는 장점.
		
		
		
		//2. 파스칼 표기법
		//-식별자 단어의 첫문자를 대문자로 표기 + 나머지 문자를 소문자로 표기
		//-2개 이상의 단어로 만든 합성어 > 각 단어의 첫문자를 대문자로 표기
		//-사용 ) 클래스명 만들 때
		// 예시는 변수로 들었지만 변수를 쓸땐 첫단어 대문자 안됨!!! 첫단어가 대문자면 클래스인가? 인터페이스인가?생각함
		
		int englishscore;
		int EnglishScore;	// 파스칼 표기법
		int English; 		// 파스칼 표기법
		
		
		//3. 캐멀 표기법
		//-식별자 단어의 첫문자를 소문자로 표기 + 나머지 문자를 소문자로 표기
		//-2개 이상의 단어로 만든 합성어 > 앞 단어의 첫문자는 소문자, 뒷단어의 첫문자를 대문자로 표기
		//-사용 ) 변수명, 메소드명.
		
		
		int englishScore;	// 캐멀 표기법
		int english;		// 캐멀 표기법
		
		
		
		int MathScore; // 파스칼 >  X (무조건 대문자로 시작하면 클래스)
		int mathScore; // 캐멀 > O (소문자로 시작하는걸 보면 변수라고만 생각함. ) => 오랫동안 관례로 쓰인 방식.
		
		
		
		//3. 스네이크 표기법
		//-전부 소문자로 표기
		//-합성어 > 각 단어를 '_'(underline)로 연결
		//-사용 ) 딱히 정해진 사용처는 없음 > 마음대로 사용 가능
		//(모든 자바 개발자가 변수를 캐널표기법으로 적진 않음. 다수가 그럴뿐, 스네이크를 선호하는 사람도 있음)
		
		int english_score;
		
		
		// 팀플을 할 때는 변수 표기를 어떻게 할건지 미리 정하고 시작함. => 코딩 컨벤션.
		
		/* 주석도 열처리 하는게 가독성에 좋음
		 
		int kor;	//국어
		int eng;	//영어
		int math;	//수학

		*/
		
		//클래스는 파스칼로!! 꼭!! 변수도 대문자로만 작성하지말고!! 습관으로 만들어!!! 변수는 캐멀 혹은 스네이크로!!
		
		
		//5. 케밥 표기법
		//-전부 소문자로 표기
		//-합성어 > 각 단어를 '-'(하이픈, 빼기기호)로 연걸
		//-사용) 자바에선 불가능.
		//- 나중 과목에서는 많이 사용함. (HTML, CSS)
		
		// int english-score;	//error. 자바는 변수이름이나 식별자한테 마이너스 기호 쓸 수 없음.
		// 자바는 빼기 연산자로 이해함. 
		
		
		
		
		
		
	}
}
