package com.test.java.obj; //03.23

public class Ex30_Class {

	public static void main(String[] args) {
		
		//Ex30_Class.java
		
		/*
			
			클래스, Class
			
			1. 객체, object
			
			2. 클래스, Class
			
			3. 인스턴스, Instance
			
			4. 추상화
			
			5. 정보 은닉(화)
			
			6. 인터페이스
			
			7. 프로퍼티, 속성
			
			8. 행동
			
			9. 상속
			
			
			변수 사용
			1. 변수 선언하기
			2. 변수 사용 > 데이터 입출력의 공간으로서 사용 (공간역할)
			
			메소드 사용
			1. 메소드 선언하기
			2. 메소드 사용하기 > 호출의 의미 > 코드 재사용
			
			클래스 사용
			1. 클래스 선언하기(정의)
				/	헤 더 	/ /{~} : 구현부(body)
				 
				class 클래스명 {
					클래스 멤버 구현
					a. 멤버 변수
					b. 멤버 메소드 
				}
			
			2. 클래스 사용 -> 객체 생성
			
				클래스명 객체명 = new 생성자();
		
		*/
		
		//요구사항] 지도 > 우리집 > 좌표 > 저장 > 호출 + 출력
		
		//Case 1.
		//- 간편해서 즉시 생성할 수 있다는 것만 장점.
		//- 식별자 문제 O > 같은 성질의 식별자가 서로 다른 이름을 사용 (x와 x2, y와 y2는 성질이 같은데 이름이 다름.)
					// > 물리적인 제약이 존재하지 않음. > 사용자 경험 근거 > 구조 불안정
						// >> 생산성, 유지보수성도 매우 안좋음. 
		//
		
		
		//우리집 좌표
		int x = 100; //위도
		int y = 200; //경도
		
		System.out.printf("우리집은 [%d, %d]에 위치합니다.\n", x, y);
		
		
		//마트 좌표
		int x2 = 300;
		int y2 = 400;
		
		System.out.printf("마트는 [%d, %d]에 위치합니다.\n", x2, y2);
		
		System.out.println();
		
		
		//Case 2.
		//-배열 사용
		//- 데이터 저장의 구조가 생성됨(물리적 차원에서 한쌍임을 증명). > 관리가 수월(용이) > 가독성이 향상 (구조가 명확해지니)
		//- 동일 성질의 데이터 > 동일한 식별자 사용(방번호) 
		//- 배열 단점 > 요소간의 성질을 구분하기 힘들다.(각각 어디가 x이고 y인지 모름)> 왜? 첨자를 사용하니까(숫자) =>이름이 x
					// >> **** 배열은 서로 다른 성질의 데이터를 넣으면 안됨.
					// - x, y는 자세히보면 각각 위도와 경도로 나누어짐.
					// 사실 클래스의 장점을 부각하려고 이렇게 말했지 단점은 아님 애초에 목적이 루프를 돌리려고 만든거니까.
		
		//b. 1명의 점수(5과목)
		int[] score = { 100, 90, 80, 70, 60 }; // 서로 다른 성질의 데이터  ->각각 어떤 과목인 알 수 없음.
		
		
		//우리집
		int[] a1 = { 100, 200 };
		
		System.out.printf("우리집은 [%d, %d]에 위치합니다.\n", a1[0], a1[1]);
		
		//마트
		
		int[] a2 = { 300, 400 };
		System.out.printf("마트는 [%d, %d]에 위치합니다.\n", a2[0], a2[1]);
		
		System.out.println();
		
		
		//Case 3.
		//- 클래스 사용
		//- 클래스를 사용해서 정의된 내용을 메모리에 실체화 시키는 행동 = 객체 생성하기 (****)
		//- 클래스는 자료형의 역할을 함. > 변수를 만들 수 있음.
		//- 데이터 저장의 구조 생성 > 관리 수월(용이) >가독성 향상
		//- 각 요소의 이름 부여 > 각각의 데이터가 어떤 데이터인지 식별이 용이함.
		
		
		
		//자료형 변수명;
		int n1 = 10;
		
		//Point p1은 주소값을 저장하는 변수.
		//그 주소값을 따라 Heap에 가보면 Class가 정의한 것 처럼 x,y 변수 2개가 한번에 저장되어있음.
		// 변수 2개가 하나에 저장되어있는 곳(클래스의 설계도대로 진짜 구현되어있는 저장공간) = 객체(=인스턴스)
		//설계도의 역할
		//1. 객체의 설계도 역할.
		//2. 객체를 저장하는데 사용한 변수(주소값 저장)를 만들기도함. => 객체변수(=참조변수)
		
		
		Point p1 = new Point(); //100번지 주소 저장 (객체의 주소값)
		
		//(객체 -> 객체변수이지만 그냥 객체라고도함.)
		//객체.멤버변수 > "." > 멤버 접근 연산자
		p1.x = 100; //Heap에 있는 객체 안 x의 값에 100이 들어감.
		p1.y = 200; //Heap에 있는 객체 안 y의 값에 200이 들어감.
		
		System.out.printf("우리집은 [%d, %d]에 위치합니다.\n", p1.x, p1.y);
		
		
		
		//마트
		Point p2 = new Point(); //또 메모리(Heap) 어딘가에 설계도가 시키는대로 x와 y변수를 만듦.
								// 그 객체의 주소값이 200이면 p2에 주소값 200번지 저장
		
		p2.x = 300;
		p2.y = 400;
		
		
		
		System.out.printf("마트는 [%d, %d]에 위치합니다.\n", p2.x, p2.y);
		System.out.println();
		
		//자바의 자료형
		//1. 기본 부품(단일 레고 블럭) > 원시형, 값형 x 8종류
		//2. 조합 부품(블럭 조합) > (기존 부품으로) 새로운 모양 창조 > 참조형 (문자열, 배열, 클래스) x 무한대
		
		
		
		//c.요구사항] 크기 저장 > 너비(width) + 높이(height)
		
		//메모리에 실체화된 객체를 따로 "인스턴스"라고 부름. (인스턴스가 조금 더 프로그래밍에 적합한 표현)
		// 객체는 인스턴스뿐만 아니라 다른 상황에서도 객체라고 부르는 게 있기 때문에 좀 더 다양하게 쓰이는 표현 (넓은 범위)
		//근데 사실 구분없이 둘다 쓰는 경우도 많음.
		
		Size s1 = new Size(); //Heap에 name 하나 width하나 height하나가 만들어져 집합을 이루고 있음.
		
		s1.name = "모니터";
		s1.width = 100;
		s1.height = 200;
		
		System.out.println(s1.name);
		System.out.println(s1.width);
		System.out.println(s1.height);
		
		Size s2 = new Size();
		
		s2.name = "키보드";
		s2.width = 50;
		s2.height = 30;
		
		System.out.println(s2.name);
		System.out.println(s2.width);
		System.out.println(s2.height);
		
		
		
		//성적 처리] 국영수
		Score m1 = new Score();
		
		m1.name = "홍길동";
		m1.kor = 100;
		m1.eng = 90;
		m1.math = 80;
		
		Score m2 = new Score();
		
		m2.name = "아무개";
		m2.kor = 95;
		m2.eng = 85;
		m2.math = 77;
		
		
		
	}//main
	
} //class



//d.성적
class Score {
	
	public String name; //학생명
	public int kor;		//국어
	public int eng ;	//영어
	public int math;	//수학
	
	
}


//c.크기 저장 클래스 -> 서로 다른 자료형도 여러개 만들 수 있음.
class Size {
	
	public String name;
	public int width;
	public int height;
	
}




//자바의 변수
//1. 클래스 멤버 변수
//2. 지역 변수


//클래스 선언하기 > 클래스명 > 파스칼 표기법 **

//설계도 
class Point {
	
	//멤버 선언하기 (변수, 메소드) > 클래스 멤버 변수 	
	public int x;
	public int y;
	
	
}




//클래스 + 객체(인스턴스)
//- 붕어빵틀(클래스) + 붕어빵(객체)  -> 같은 틀에서 만들었기 때문에 생김새와 역할, 목적이 동일함.











