package com.test.java; //03.04

public class Ex02_DataType {

	public static void main(String[] args) {
		
		//두번재 예제입니다.
		
		//단일 주석 단축키 : Ctrl + / (설정, 해제 둘다 같음)
		//다중 주석 단축키 : Ctrl + shift + / (해제할 땐 \)
		
		
//		  System.out.println();
//		  System.out.println();
//		  System.out.println();
//		  System.out.println();
//		  System.out.println();
			
		//Ctrl + Alt + 방향키(위, 아래) : 행 복사
		//Alt + 방향키(위, 아래) : 행 이동
		//블럭 잡기(선택 영역) : Shift + 방향키 (위아래/좌우)
		//Shift + ctrl + 방향키  : 단위가 조금 커진 블럭 잡기
		//Shift + Home : 커서 왼쪽 문장 전체 잡기
		//Shift + End : 커서 오른 쪽 문장 전체 잡기
		//Ctrl + D : 한줄 삭제

//		  System.out.println("안녕하세요");
//		  System.out.println("반가워요");
//		  System.out.println("홍길동입니다.");

		// 책도 꼭 봐라. 한 과목당 2~3권은 봐야해 도서관 자주 가서 책 빌려라 (1,2번만 읽으면 되는 책이 많음. 사지마)
		// 그림책도 ㄱㅊㄱㅊ -> 비싸니까 빌려(IT 책은 안빌림 ㅋㅋㅋ 그래서 항상 있음 바로 연장도 가능)
		// 영상 강의도 좋지만 가장 기초는 책 읽기! 둘의 무게감이 달라
		// 소설같은 자바가 더 읽기 쉬움
		
		//새로운 언어(기술) > 자료형(Data Type)
		
		/*
		
			자료형, Data Type
			- 데이터의 형태
			- 데이터의 길이(범위)와 생김새를 미리 정의하고 분류해놓은 규칙 > 이름
			
			현실(학교) 
			- 100,200,300 > 숫자
			- 10, 20, 30 > 정수
			- 2.3, 45.54 > 실수
			- 홍길동, 자바, 컴퓨터 > 문자(열)
			
			
			"자바의 값형에는 어떤게 있어요?"
			> "정수형에는 byte, short, int, long이 있구요.
			   실수형에 float, double이 있구요.
			   문자형에 char가 있고,
			   논리형에는 boolean이 있습니다. "
			
			
			반드시 연속적인 공간을 줌 (비트수만큼)
			8bit : 0~255까지 숫자 저장가능 (강의 설명 굿)
			
			양수, 음수, 0을 표현하고 싶을 때
			2^8이었던걸 맨 앞을 부호비트로 뗌 부호비트가 0이면 양수, 1이면 음수로 약속함.
			근데 음수법은 정확힌 좀 다르지지만 기본적으론 저렇게만 이해해도 ㄱㅊ 그럼 데이터비트는 2^7
			2^8 = 256 > 0~255
			2^7 = 128 > -128~127 (0은 음수도 양수도 아니니까 어디에서 빼야 하는데 보통 양수에서 빼기로 약속)
			
			*자바의 정석 42pg/55pg부터 기본형까지 읽기 기초편도 확인해봐,,자료형
			
			*float (p.71)
			3.14 = 314x10^-2 = 314e-2
			부호 1칸 + 지수부 3칸 (-2 / 10은 저장 안해도됨) + 가수부 4칸 (314)
			가수부 :  2^4승까지밖에 못옴. (4칸 뿐이니까) = 0~16까지 표현가능 
			지수부 : 2^3승까지 표현 가능. = 0~8까지 표현가능.  여기서 8은 16x10^8의 8임. (=16억..)
			-유효한 숫자들을 채웠던 정수랑은 다르게 여기선 지수부가 조금만 늘어도 지수가 엄청 늘어나니 표현할 수 있는
			숫자 범위가 아주 커짐.
			-단점 : 가수부가 제한적임. 그래서 저장못하는 나머지데이터가 있으면 버려버림.
				ex. 314x10^-2 -> 3만 남기고 뒤에 0으로 채워서 300x10^-2 로 되어버림
				그래서 실수숫자는 표현할 수 있는 범위는 광범위하지만 가수부에 대한 손실이 생겨서 오차가 생길 수 있음
				아주 중요한 숫자는 손실이 생길수도 있으니 실수로 저장x 그에 반해 정수분은 손실은 전혀x 대신 범위가 적음.
				
			*문자형
			- 문자를 표현하기 위해서 약속(규칙)을 함. ex) A = 0, 1 = B 이런식으로
				-> 이 규칙을 문자 셋이라고 함. = 문자코드 
			- 256 경우의수 -> 영문자(26+26) + 특수문자 + 숫자 (1byte로 충분.)
			- but, 한글이나 한문은 엄청 많으니까 1byte부족 그래서 2byte(65535)로 늘림 -> 충분. (최근에야 문자 2byte됨.)
				=> 이걸 바로 유니코드(UniCode)라고 함! 
			-한글 체계
			1. 조합형
				-초성, 중성, 종성 > 조합 > 한글자 / 이걸 조합해서 하나의 문자를 만들어내는 체계
				-현 시점에선 어디를 가도 이 조합형체계를 지원하는 곳은 x (마지막으로 지원했던 곳이 2010년 아래아 한글..) 
			2. 완성형
				-글자를 이미지화
				-가능한 한 모든 문자를 등록. (점점 늘어나는중)
			
			*boolean
			- 참 : 0000001 / 거짓 : 0000000 => 1bit면 쌉충분
			- java는 다룰 수 있는 최소 단위가 byte. (저장공간 단위로는 bit를 다룰 수 없음.)
			
			자바의 자료형
			1. 원시형(Primitive Type), 값형(Value Type)
				a. 숫자형
					1. 정수형
						a. byte
							- 1byte(=8bit)
							- 2^8 (숫자 1,2 두가지를 가질 수 있는 공간이 8개 = 2^8승. 즉 256가지 경우의 수)
							- -128~127 까지 저장할 수 있는 자료형
						b. short
							- 2byte(=16bit)
							- 2^16
							- -32768~327767 (65535)
						c. int
							-4byte(=32bit)
							- 2^32
							- -21억 ~ 21억
						d. long
							- 8byte(=64bit)
							- 2^64
							- -922경 ~ 922경
							
					2. 실수형
						a. float
							- 4byte
							- 범위 무제한
							- 단정도형 (정밀도 > 유효한 숫자를 저장할 수 있는 범위)
							
							TODO long형을 정리할 것. (2022-03-01 09:40)
							
						b. double
							- 8byte
							- 배정도형 (단정도보다 두배 더 정밀하다 해서 배정도)
							
				b. 문자형
					1. 문자형
						a. char
							- 2byte
							- 유니코드 지원
				c. 논리형
					1. 논리형
						a. boolean
							- 1byte
							- 명제 > 참, 거짓
							- true, false
						
						
			2. 참조형(Reference Type)
				- 나중에 수업
			
			
			byte(=8bit) 
			1024byte = 1KB
			1024KB = 1MB
			1024MB = 1GB
			1024GB = 1TB
			
			
		*/
	}
}































